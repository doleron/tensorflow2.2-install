
# Note about system requirements

In my tests I used a Windows 10 pro 64 bits running on virtualbox with 6GB or 8GB de RAM and 100 GB of disk space.
Bazel, the build system from google which tensorflow use for the build takes huge amounts of memory and CPU time. In adddition, during the build, bazel download several projects and artifacts being sometimes the build failing due to network issues like timeouts.

# download and install python 3.6

https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe

# download and install git for windows

https://github.com/git-for-windows/git/releases/download/v2.27.0.windows.1/Git-2.27.0-64-bit.exe

# install python packages with pip

```
pip3 install six numpy wheel
pip3 install keras_applications==1.0.6 --no-deps
pip3 install keras_preprocessing==1.0.5 --no-deps
``

# install bazel/bazelisk

https://github.com/bazelbuild/bazelisk/releases/download/v1.5.0/bazelisk-windows-amd64.exe

rename bazelisk-windows-amd64.exe to bazel.exe

put bazel.exe visible to path variable

# Install MSYS2 

https://github.com/msys2/msys2-installer/releases/download/2020-06-02/msys2-x86_64-20200602.exe

Follow the MSYS2 installation instruction: https://www.msys2.org/

add C:\msys64\usr\bin to your %PATH% environment variable

Execute:

```
pacman -S git patch unzip
```

# Install the Visual C++ stuff

Microsoft Visual C++ 2019 Redistributable:
Go to https://visualstudio.microsoft.com/downloads/ and search for "Microsoft Visual C++ 2019 Redistributable"

Microsoft Build Tools 2019
go to https://visualstudio.microsoft.com/visual-cpp-build-tools/ and download & install

# clone tensorflow

open a command terminal and type

```
git clone https://github.com/tensorflow/tensorflow.git
cd tensorflow
git checkout v2.2.0
```
PS.: check out this link if the cloning is too slow: https://stackoverflow.com/questions/45768893/git-clone-in-windows-much-slower-than-in-linux and restart

# build

execute:

```
python ./configure.py
```
and then

```
bazel build //tensorflow/tools/pip_package:build_pip_package
```

This command above will demand hours to finish. In my experiments this took around 4,5 hours long to finish.

Once finished, run:
```
bazel-bin\tensorflow\tools\pip_package\build_pip_package C:/tmp/tensorflow_pkg/tensorflow-2.2.0-cp36-cp36m-win_amd64.whl
```
This command took a couple of minutes to finish, generating a `tensorflow-*.whl` python wheel file created into folder `C:/tmp/tensorflow_pkg` . In my case the file is named tensorflow-2.2.0-cp36-cp36m-win_amd64.whl .

Once you know the file name, install it running:

```
pip3 install C:/tmp/tensorflow_pkg/tensorflow-version-cp36-cp36m-win_amd64.whl
```

In this point tensorflow 2.2.0 should be properly installed on the system. Let's check out it.

# validating installation

move to another folder and run python:

```
cd ..
python
```
then execute the following python instructions:
```python
import tensorflow as tf;
print(tf__version__)
```
DISCLAIMER: Note that move to outside the folder where you build tensorflow is required. If you miss this you will end up with raise `ImportError("Could not import tensorflow. Do not import tensorflow "` error.

If everything is good, python will print out the tensorflow version:
```
2.2.0
```

You can also use python to train a model:

call:

```
python test.py
```

Note that the test.py program is available on this repository. Once ran, this program should output something as:

```
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11493376/11490434 [==============================] - 1s 0us/step
Epoch 1/5
1875/1875 [==============================] - 2s 904us/step - loss: 0.2911 - accuracy: 0.9141
Epoch 2/5
1875/1875 [==============================] - 2s 945us/step - loss: 0.1419 - accuracy: 0.9582
Epoch 3/5
1875/1875 [==============================] - 2s 898us/step - loss: 0.1053 - accuracy: 0.9680
Epoch 4/5
1875/1875 [==============================] - 2s 960us/step - loss: 0.0852 - accuracy: 0.9737
Epoch 5/5
1875/1875 [==============================] - 2s 1ms/step - loss: 0.0734 - accuracy: 0.9765
313/313 - 0s - loss: 0.0745 - accuracy: 0.9774
```

That's is. Tensorflow is running on your machine.
